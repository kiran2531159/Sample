import streamlit as st
import pandas as pd
import json
import ibm_db
import mysql.connector
import pyodbc
from pyhive import hive
import matplotlib.pyplot as plt
import plotly.express as px

# Streamlit app title
st.title("Database Management App with Visualizations")

# Load authentication details from JSON
try:
    with open("auth.json", "r") as f:
        auth_data = json.load(f)
except FileNotFoundError:
    st.error("auth.json file not found. Please create it with the required credentials.")
    st.stop()

# Database selection
db_type = st.selectbox("Select Database Type", ["DB2", "MySQL", "MS SQL", "Hive"])

# Display connection details from JSON (read-only)
st.subheader("Connection Details (Loaded from auth.json)")
if db_type in auth_data:
    st.write(auth_data[db_type])
else:
    st.error(f"No configuration found for {db_type} in auth.json")
    st.stop()

# Function to connect to the database
@st.cache_resource
def connect_to_db(db_type, auth):
    try:
        if db_type == "DB2":
            conn_str = f"DATABASE={auth['database']};HOSTNAME={auth['host']};PORT={auth['port']};PROTOCOL=TCPIP;"
            conn = ibm_db.connect(conn_str, "", "")
            return conn
        elif db_type == "MySQL":
            conn = mysql.connector.connect(
                host=auth["host"],
                port=auth["port"],
                database=auth["database"],
                user=auth["username"],
                password=auth["password"]
            )
            return conn
        elif db_type == "MS SQL":
            conn = pyodbc.connect(
                f"DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={auth['host']},{auth['port']};DATABASE={auth['database']};UID={auth['username']};PWD={auth['password']}"
            )
            return conn
        elif db_type == "Hive":
            conn = hive.connect(
                host=auth["host"],
                port=auth["port"],
                database=auth["database"],
                auth="KERBEROS",
                kerberos_service_name=auth["kerberos_service_name"]
            )
            return conn
    except Exception as e:
        st.error(f"Connection failed: {str(e)}")
        return None

# Connect button
if st.button("Connect"):
    conn = connect_to_db(db_type, auth_data[db_type])
    if conn:
        st.session_state["conn"] = conn
        st.success(f"Connected to {db_type} database successfully!")

# Query execution section
if "conn" in st.session_state:
    st.subheader("Run SQL Query")
    query = st.text_area("Enter your SQL query", "SELECT * FROM table_name LIMIT 10")
    
    if st.button("Execute Query"):
        conn = st.session_state["conn"]
        try:
            if db_type == "DB2":
                stmt = ibm_db.exec_immediate(conn, query)
                result = ibm_db.fetch_assoc(stmt)
                rows = []
                while result:
                    rows.append(result)
                    result = ibm_db.fetch_assoc(stmt)
                df = pd.DataFrame(rows)
            else:  # MySQL, MS SQL, Hive
                cursor = conn.cursor()
                cursor.execute(query)
                rows = cursor.fetchall()
                columns = [desc[0] for desc in cursor.description]
                df = pd.DataFrame(rows, columns=columns)
                cursor.close()
            
            st.session_state["query_result"] = df
            st.write("Query Results:")
            st.dataframe(df)
        except Exception as e:
            st.error(f"Query failed: {str(e)}")

    # Visualization section
    if "query_result" in st.session_state:
        df = st.session_state["query_result"]
        st.subheader("Visualize Results")
        
        viz_library = st.selectbox("Select Visualization Library", ["Matplotlib", "Plotly"])
        chart_type = st.selectbox("Select Chart Type", ["Bar", "Line", "Pie"])
        x_col = st.selectbox("Select X-axis column", df.columns)
        y_col = st.selectbox("Select Y-axis column (for Bar/Line)", df.columns if chart_type != "Pie" else [None])

        if st.button("Generate Chart"):
            if viz_library == "Matplotlib":
                plt.figure(figsize=(10, 6))
                if chart_type == "Bar":
                    plt.bar(df[x_col], df[y_col])
                    plt.xlabel(x_col)
                    plt.ylabel(y_col)
                    plt.title(f"{y_col} by {x_col}")
                elif chart_type == "Line":
                    plt.plot(df[x_col], df[y_col], marker="o")
                    plt.xlabel(x_col)
                    plt.ylabel(y_col)
                    plt.title(f"{y_col} over {x_col}")
                elif chart_type == "Pie":
                    plt.pie(df[x_col], labels=df[x_col].index if df[x_col].dtype == "object" else None, autopct="%1.1f%%")
                    plt.title(f"Distribution of {x_col}")
                plt.tight_layout()
                st.pyplot(plt)
            
            elif viz_library == "Plotly":
                if chart_type == "Bar":
                    fig = px.bar(df, x=x_col, y=y_col, title=f"{y_col} by {x_col}")
                elif chart_type == "Line":
                    fig = px.line(df, x=x_col, y=y_col, title=f"{y_col} over {x_col}", markers=True)
                elif chart_type == "Pie":
                    fig = px.pie(df, names=x_col, title=f"Distribution of {x_col}")
                st.plotly_chart(fig, use_container_width=True)

# Disconnect button
if "conn" in st.session_state and st.button("Disconnect"):
    st.session_state["conn"].close()
    del st.session_state["conn"]
    if "query_result" in st.session_state:
        del st.session_state["query_result"]
    st.success("Disconnected successfully!")